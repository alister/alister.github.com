<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dns | Professional Blog]]></title>
  <link href="http://alister.github.com/blog/categories/dns/atom.xml" rel="self"/>
  <link href="http://alister.github.com/"/>
  <updated>2013-02-18T10:54:32+00:00</updated>
  <id>http://alister.github.com/</id>
  <author>
    <name><![CDATA[Alister Bulman]]></name>
    <email><![CDATA[abulman+abgh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why I like djbdns & tinydns]]></title>
    <link href="http://alister.github.com/blog/2013/01/07/why-i-like-tinydns/"/>
    <updated>2013-01-07T12:21:00+00:00</updated>
    <id>http://alister.github.com/blog/2013/01/07/why-i-like-tinydns</id>
    <content type="html"><![CDATA[<p>I've been using TinyDNS, and the associated systems, like DNScache and DaemonTools since 2003, when I was first tasked with setting up a local DNS resolver, and a DNS server for a web-development company I was working at <a href="http://www.datasouth.co.uk/">http://www.datasouth.co.uk/</a>. We had dozens of domain names, and organising the changes - as well as paying per domain name, was getting to be, well, annoying, as well as potentially expensive.</p>

<p>So, I was asked to setup our own name servers....<!-- more --></p>

<p>I looked at BIND, and even bought the O'Reilly 'Cricket' book, but the plan was to use an in-house database management system/CMS to hold the details of the various DNS records and then output the pieces to the DNS server. The thought of producing bind format text files did not appeal - the are pretty complex.</p>

<p>Then, I came across another option - TinyDNS, and a few associated tools, written by djb - Daniel J. Bernstein, who is a mathematician, cryptologist, programmer, and research professor of computer science. It's very <em>opinionated</em> software, and so is the configuration, but easy enough to follow a howto and get working.</p>

<p>One of the design choices that make it so easy to work with is that there is a simple-to-understand format for the configuration file, one line per record, for example each Cname, A or MX record is just one line, with the first character being the type (for example a '@' for an MX record), and the various parts of it is then split up between colons. The latter parts of the record, with information as time-to-live durations, and other defaults, can be safely left to the defaults.</p>

<p>See: <a href="http://cr.yp.to/djbdns/tinydns-data.html">http://cr.yp.to/djbdns/tinydns-data.html</a> for the exact structure of the data file (or, in fact, of each line that you will generally be using).</p>

<p>Given the various records already in a database, converting them each into such a simple output format is not very difficult at all. In fact, I used an existing perl script as a large basis to do the conversion (porting the perl to PHP was itself trivial), and simply wrapping some database access code around it.</p>

<p>Since the output was just a text file, which was then compiled down into a small database, it was also trivial to have all the name servers (including a tertiary, ns3, name server) call into the server by HTTP (from a cron-job). The web-page produced the data, and output the file as plain text. With the page protected by IP and a HTTP password, it's entirely secure, and very easy to setup.</p>

<p>In my next djbdns/tinydns post, I'll show you how to setup your own, local top-level domain names - which I find very useful for development, among other things.</p>

<p>Also take a look at the first post in this little series: <a href="http://alister.github.com/blog/2012/12/31/dns-and-my-refreshed-cv-site/">http://alister.github.com/blog/2012/12/31/dns-and-my-refreshed-cv-site/</a>, where I also how an example of a TinyDNS zone file, and how simple it can be made with LuaDNS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS and my refreshed CV site]]></title>
    <link href="http://alister.github.com/blog/2012/12/31/dns-and-my-refreshed-cv-site/"/>
    <updated>2012-12-31T12:07:00+00:00</updated>
    <id>http://alister.github.com/blog/2012/12/31/dns-and-my-refreshed-cv-site</id>
    <content type="html"><![CDATA[<p>It has been in process for a little while, starting when I moved the bulk of my DNS hosting from <a href="http://www.bytemark.co.uk/">http://www.bytemark.co.uk/</a> (with whom I've had a small virtual machine since April 2004). One of the things I really like about Bytemark was the free DNS hosting they provided, particularly since they used <a href="http://tinydns.org/">TinyDNS</a> - which is worthy of its own post. To add a new domain name, create a small file with the relevant lines, with one per DNS record - really easy if you have any kind of database or automation.</p>

<!-- more -->


<p><div><script src='https://gist.github.com/4419185.js'></script>
<noscript><pre><code># Sample tinydns record
# These records are necessary for each domain to be properly delegate
# to Bytemark's four DNS servers. They insert the necessary NS records
# to claim authority for the domain.
# If you have delegated by name to the [abc].ns.bytemark.co.uk
# servers, use these lines
.abulman.co.uk::a.ns.bytemark.co.uk:259200
.abulman.co.uk::b.ns.bytemark.co.uk:259200
.abulman.co.uk::c.ns.bytemark.co.uk:259200
#
+abulman.co.uk:188.40.84.86:86400
+www.abulman.co.uk:188.40.84.86:86400
+*.abulman.co.uk:188.40.84.86:86400
#
@abulman.co.uk::ASPMX.L.GOOGLE.COM:1:3600
@abulman.co.uk::ALT1.ASPMX.L.GOOGLE.COM:5:3600
@abulman.co.uk::ALT2.ASPMX.L.GOOGLE.COM:5:3600
@abulman.co.uk::ASPMX2.GOOGLEMAIL.COM:10:3600
@abulman.co.uk::ASPMX3.GOOGLEMAIL.COM:10:3600
@abulman.co.uk::ASPMX4.GOOGLEMAIL.COM:10:3600
@abulman.co.uk::ASPMX5.GOOGLEMAIL.COM:10:3600
# SPF record
:abulman.co.uk:16:\037v=spf1\040mx\040include\072plus.net\040~all:86400
# now obsolete link to Livejournal
+journal.abulman.co.uk:204.9.177.18:86400
</code></pre></noscript></div>
<!-- tinydns record --></p>

<p>Back in April (2012), I came across <a href="http://news.ycombinator.com/item?id=3794654">a post on HackerNews</a> to <a href="http://www.luadns.com/">http://www.luadns.com/</a>. This is a system that again, uses TinyDNS as a backend, but instead of some hacked-together PHP scripts I wrote to produce the data files, they are run through a Lua script. That gives the benefit of very easy to read configurations, and then the files themselves are stored in a Git repository, which can arrange to notify the main luadns website whenever it is changed, so the records are updated whenever the repository is.</p>

<p><div><script src='https://gist.github.com/4419224.js'></script>
<noscript><pre><code>-- File: abulman.co.uk.lua
-- Zone: abulman.co.uk
-- SOA record is automatically generated
-- Variable _a is replaced with zone name
-- _a = &quot;abulman.co.uk&quot; (from the filename)

-- _webserverIP &amp; _longTTL are variables

-- A records - 
std_a(_a, _webserverIP)
a('blog', _webserverIP, _longTTL)

-- CNAME records
cname(&quot;pages&quot;, 'ghs.google.com')
-- Templates (see templates.lua)
google_app(_a, 'ghs.google.com', _longTTL)
</code></pre></noscript></div>
<!-- luadns record --></p>

<p>So, with the use of the service from luadns, I had a good reason to a) move my DNS off bytemark (with the intention to also eventually shut down my old server there), and b) tidy it up as I went. So I did. I had already moved my tech-blog to <a href="http://phpscaling.com/">http://phpscaling.com/</a> last year, and over this last few weeks, I added <a href="http://abulman.co.uk/">http://abulman.co.uk/</a> to the same Wordpress installation.</p>

<p>Supporting different domain names for (at least) two different blogs isn't too easy in a stack Wordpress 3 installation. It isn't made any easier becuase I also have a couple of domain name aliases that point to the <a href="http://abulman.co.uk/">http://abulman.co.uk/</a> site (there is also <a href="http://alisterb.co.uk/">http://alisterb.co.uk/</a>, and of course there is also the www.* versions) and so I was having a lot of trouble till I found the <a href="http://wordpress.org/extend/plugins/wordpress-mu-domain-mapping/">wordpress-mu-domain-mapping</a> plugin. While it's not quite a drop-in plugin (you have to copy some files around manually) and of course setup the IP address and domain names, it solved my problem.</p>
]]></content>
  </entry>
  
</feed>
